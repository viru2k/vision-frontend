import { IPivotValues, IDataOptions, IFieldOptions, IFilter, ISort, IFormatSettings, ICalculatedFieldSettings } from './engine';
import { IDrillOptions, IGroupSettings } from './engine';
import { PivotView } from '../pivotview';
import { PivotFieldList } from '../pivotfieldlist';
/**
 * This is a file to perform common utility for OLAP and Relational datasource
 * @hidden
 */
export declare class PivotUtil {
    static getType(value: Date): string;
    static resetTime(date: Date): Date;
    static getClonedData(data: {
        [key: string]: Object;
    }[]): {
        [key: string]: Object;
    }[];
    static getClonedPivotValues(pivotValues: IPivotValues): IPivotValues;
    private static getClonedObj;
    static inArray(value: Object, collection: Object[]): number;
    static isContainCommonElements(collection1: Object[], collection2: Object[]): boolean;
    static setPivotProperties(control: any, properties: any): void;
    static getClonedDataSourceSettings(dataSourceSettings: IDataOptions): IDataOptions;
    static updateDataSourceSettings(control: PivotView | PivotFieldList, dataSourceSettings: IDataOptions): void;
    private static cloneFieldSettings;
    private static cloneFilterSettings;
    private static cloneSortSettings;
    private static cloneDrillMemberSettings;
    static cloneFormatSettings(collection: IFormatSettings[]): IFormatSettings[];
    private static CloneValueSortObject;
    private static cloneCalculatedFieldSettings;
    private static cloneConditionalFormattingSettings;
    static cloneGroupSettings(collection: IGroupSettings[]): IGroupSettings[];
    private static cloneCustomGroups;
    static getFilterItemByName(fieldName: string, fields: IFilter[]): IFilter;
    static getFieldByName(fieldName: string, fields: IFieldOptions[] | ISort[] | IFormatSettings[] | IDrillOptions[] | IGroupSettings[] | ICalculatedFieldSettings[]): IFieldOptions | ISort | IFormatSettings | IDrillOptions | IGroupSettings | ICalculatedFieldSettings;
}
